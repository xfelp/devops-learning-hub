pipeline {
  agent any
  options {
    timestamps()
    // Si ya tienes el plugin AnsiColor y quieres color:
    // wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm'])
  }
  environment {
    TF_IN_AUTOMATION = 'true'
    TF_INPUT = '0'
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Terraform CLI') {
      steps {
        // FORZAR BASH AQUÍ
        sh(script: '''
          set -euo pipefail
          TF_DIR="$WORKSPACE/.tf-bin"
          TF_BIN="$TF_DIR/terraform"
          VER="1.6.6"

          mkdir -p "$TF_DIR"
          if [ ! -x "$TF_BIN" ]; then
            curl -fsSLO "https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip"
            # Intentar con unzip; si no existe, usar jar (Java) o python3
            if command -v unzip >/dev/null 2>&1; then
              unzip -o "terraform_${VER}_linux_amd64.zip" -d "$TF_DIR"
            elif command -v jar >/dev/null 2>&1; then
              (cd "$TF_DIR" && jar xf "$WORKSPACE/terraform_${VER}_linux_amd64.zip")
            else
              python3 - <<'PY'
import os, zipfile
zipfile.ZipFile(os.path.join(os.environ['WORKSPACE'], f"terraform_${os.environ['VER']}_linux_amd64.zip")).extractall(os.environ['TF_DIR'])
PY
            fi
            chmod +x "$TF_DIR/terraform"
          fi

          export PATH="$TF_DIR:$PATH"
          terraform -version
        ''', shell: '/bin/bash')
      }
    }

    stage('Init & Validate') {
      steps {
        dir('jenkins/terraform-jenkins-vm') {
          withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'GOOGLE_CLOUD_KEYFILE_JSON')]) {
            sh(script: '''
              set -euo pipefail
              export PATH="$WORKSPACE/.tf-bin:$PATH"
              export GOOGLE_APPLICATION_CREDENTIALS="$GOOGLE_CLOUD_KEYFILE_JSON"

              terraform init -input=false -upgrade
              terraform validate
            ''', shell: '/bin/bash')
          }
        }
      }
    }

    stage('Plan') {
      steps {
        dir('jenkins/terraform-jenkins-vm') {
          withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'GOOGLE_CLOUD_KEYFILE_JSON')]) {
            sh(script: '''
              set -euo pipefail
              export PATH="$WORKSPACE/.tf-bin:$PATH"
              export GOOGLE_APPLICATION_CREDENTIALS="$GOOGLE_CLOUD_KEYFILE_JSON"

              terraform plan -input=false -out=tfplan -compact-warnings
            ''', shell: '/bin/bash')
          }
        }
      }
    }

    stage('Manual Approval') {
      steps {
        timeout(time: 15, unit: 'MINUTES') {
          input message: '¿Aplicar los cambios de Terraform?', ok: 'Aplicar'
        }
      }
    }

    stage('Apply') {
      steps {
        dir('jenkins/terraform-jenkins-vm') {
          withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'GOOGLE_CLOUD_KEYFILE_JSON')]) {
            sh(script: '''
              set -euo pipefail
              export PATH="$WORKSPACE/.tf-bin:$PATH"
              export GOOGLE_APPLICATION_CREDENTIALS="$GOOGLE_CLOUD_KEYFILE_JSON"

              terraform apply -input=false -auto-approve tfplan
              terraform output || true
            ''', shell: '/bin/bash')
          }
        }
      }
    }
  }
  post {
    always {
      dir('jenkins/terraform-jenkins-vm') {
        sh(script: '''
          set -euo pipefail
          export PATH="$WORKSPACE/.tf-bin:$PATH"
          terraform output -json > tf-outputs.json || true
        ''', shell: '/bin/bash')
        archiveArtifacts artifacts: 'tf-outputs.json', onlyIfSuccessful: false, fingerprint: true
      }
    }
  }
}
